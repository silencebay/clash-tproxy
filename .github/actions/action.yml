name: Build
description: Build clash image
inputs:
  tag:
    description: release tag
    required: true
  platforms:
    description: Platforms built for
    required: true
    default: linux/amd64
  compiled_with:
    description: compiled with
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - name: Setup Dependencies
      run: |
        sudo apt install curl jq -y --no-install-recommends
      shell: bash
    - name: Get Clash version
      id: version
      env:
        TAG: ${{ inputs.tag }}
      run: |
        release_endpoint="latest"
        case ${TAG} in
                "prerelease-alpha")  release_endpoint="tags/Prerelease-Alpha" ;;
                "prerelease-meta") release_endpoint="tags/Prerelease-Meta" ;;
        esac
        res=$(curl -LSs "https://api.github.com/repos/MetaCubeX/Clash.Meta/releases/${release_endpoint}?per_page=1")
        asset=$(echo "$res" | jq -r --arg architecture "linux-amd64" '.assets | map(select(.name | contains($architecture))) | first')
        clash_download_url=$(echo "$asset" | jq -r '.browser_download_url' -)
        clash_updated_at=$(echo "$asset" | jq -r '.updated_at' -)
        curl -L $clash_download_url | gunzip - > clash
        chmod +x ./clash
        version=$(./clash -v | head -n 1 | awk '{print $3}')
        [ $? -eq 0 ] || exit 1
        echo "result=${version}" >> $GITHUB_OUTPUT
        echo "updated-at=${clash_updated_at}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Get docker image tags
      id: docker-tags
      env:
        TAG: ${{ inputs.tag }}
        COMPILED_WITH: ${{ inputs.compiled_with }}
      run: |
        clash_version=${{ steps.version.outputs.result }}
        clash_version="${clash_version#v}"
        case ${TAG} in
          "latest")
                                TAG=""
                                clash_version="-${clash_version}" ;;
          "prerelease-alpha")  
                                TAG="-alpha"
                                clash_version="" ;;
          "prerelease-meta")   
                                TAG="-meta"
                                clash_version="" ;;
        esac;
        [ -n "${COMPILED_WITH}" ] && COMPILED_WITH="-${COMPILED_WITH}"
        tags="${{ env.DOCKERHUB_USERNAME }}/clash-tproxy:meta${TAG}${COMPILED_WITH}${clash_version},ghcr.io/${{ github.actor }}/clash-tproxy:meta${TAG}${COMPILED_WITH}${clash_version}"
        [ -z "${TAG}" ] && tags="${tags},${{ env.DOCKERHUB_USERNAME }}/clash-tproxy:meta${TAG}${COMPILED_WITH}-latest,ghcr.io/${{ github.actor }}/clash-tproxy:meta${TAG}${COMPILED_WITH}-latest"
        echo "result=${tags}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Get FireQOS version
      id: fireqos-latest-version
      run: |
        release_endpoint="latest"
        fireqos_version=${FIREQOS_VERSION:-latest}
        case ${fireqos_version} in
          "latest")  release_endpoint="latest" ;;
          *) release_endpoint="tags/{$fireqos_version}"
        esac
        updated_at=$(curl -LSs "https://api.github.com/repos/firehol/firehol/releases/${release_endpoint}?per_page=1" | jq -r '.assets[0].updated_at')
        echo "updated-at=${updated_at}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64,arm
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    # Setup the Github Actions cache.
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache/${{ inputs.tag }}/${{ inputs.compiled_with }}
        key: ${{ runner.os }}-buildxarch-${{ inputs.tag }}-${{ inputs.compiled_with }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildxarch-${{ inputs.tag }}-${{ inputs.compiled_with }}-
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}
    - name: Login to Github Package
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ env.GITHUB_TOKEN }}
    # the arm64 is of course much slower due to qemu, so build and push amd64 **first**
    # due to the way manifests work, the gap between this and the complete push below
    #  could result in pull failures or inconsistencies for arm64, such is life.
    # further duplicated by building both release and debug builds
    - name: Build and push amd64 Release Docker Image to DockerHub and Github docker registry
      uses: docker/build-push-action@v4
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.docker-tags.outputs.result }}
        build-args: |
          FIREQOS_VERSION=${{ env.FIREQOS_VERSION }}
          FIREQOS_UPDATED_AT=${{ steps.fireqos-latest-version.outputs.updated-at }}
          RELEASE_TAG=${{ inputs.tag }}
          CLASH_UPDATED_AT=${{ steps.version.outputs.updated-at }}
          CLASH_VERSION=${{ steps.version.outputs.result }}
          COMPILED_WITH=${{ inputs.compiled_with }}
        cache-from: type=local,src=/tmp/.buildx-cache/${{ inputs.tag }}/${{ inputs.compiled_with }}
        # first run does not export the cache

    # Do it all again with both archs. the amd64 will be a huge cache hit
    # this will update the manifest have both arches
    - name: Build and push multiarch Release Docker Image to DockerHub and Github docker registry
      uses: docker/build-push-action@v4
      if: inputs.platforms != 'linux/amd64'
      with:
        builder: ${{ steps.buildx.outputs.name }}
        context: .
        file: ./Dockerfile
        platforms: ${{ inputs.platforms }}
        push: true
        tags: ${{ steps.docker-tags.outputs.result }}
        build-args: |
          FIREQOS_VERSION=${{ env.FIREQOS_VERSION }}
          FIREQOS_UPDATED_AT=${{ steps.fireqos-latest-version.outputs.updated-at }}
          RELEASE_TAG=${{ inputs.tag }}
          CLASH_UPDATED_AT=${{ steps.version.outputs.updated-at }}
          CLASH_VERSION=${{ steps.version.outputs.result }}
          COMPILED_WITH=${{ inputs.compiled_with }}
        cache-from: type=local,src=/tmp/.buildx-cache/${{ inputs.tag }}/${{ inputs.compiled_with }}
        cache-to: type=local,dest=/tmp/.buildx-cache/${{ inputs.tag }}/${{ inputs.compiled_with }}
