name: Publish Docker Image

on:
  push:
    branches: 
      - clash-premium
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 0 */3 * *"
  workflow_dispatch:

jobs:
  multi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Get Clash version
      #   id: version
      #   run: |
      #     sudo apt install jq
      #     version=$(curl -LSs https://api.github.com/repos/Dreamacro/clash/releases/tags/premium | jq -r .name)
      #     version=$(echo ${version##* })
      #     echo "::set-output name=result::${version}"
      - name: Setup Dependencies
        run: |
          sudo apt install curl jq -y --no-install-recommends
      - name: Get Clash version
        id: version
        run: |
          clash_download_url=$(curl -L https://api.github.com/repos/Dreamacro/clash/releases/tags/premium | jq -r --arg architecture "linux-amd64" '.assets[] | select (.name | contains($architecture)) | .browser_download_url' -); \
          curl -L $clash_download_url | gunzip - > clash;
          chmod +x ./clash
          version=$(./clash -v | awk '{print $2}')
          [ $? -eq 0 ] || exit 1
          echo "::set-output name=result::${version}"
      - name: Get FireQOS version
        id: fireqos_latest_version
        env:
          FIREQOS_VERSION: ${{ secrets.FIREQOS_VERSION }}
        run: |
          target_commitish=$(curl -LSs 'https://api.github.com/repos/firehol/firehol/releases/latest' | jq -r '.target_commitish')
          ${{ env.FIREQOS_VERSION == '' }} || ${{ env.FIREQOS_VERSION == 'latest' }} && echo "::set-output name=target_commitish::${target_commitish}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64,arm
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      # Setup the Github Actions cache.
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildxarch-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildxarch-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Github Package
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: silencebay
          password: ${{ secrets.PACKAGE_TOKEN }}
      # the arm64 is of course much slower due to qemu, so build and push amd64 **first**
      # due to the way manifests work, the gap between this and the complete push below
      #  could result in pull failures or inconsistencies for arm64, such is life.
      # further duplicated by building both release and debug builds
      - name: Build and push amd64 Release Docker Image to DockerHub and Github docker registry
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/clash-tproxy:premium-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/clash-tproxy:premium-${{ steps.version.outputs.result }}
            ghcr.io/silencebay/clash-tproxy:premium-latest
            ghcr.io/silencebay/clash-tproxy:premium-${{ steps.version.outputs.result }}
          build-args: |
            FIREQOS_VERSION=${{ secrets.FIREQOS_VERSION }}
            FIREQOS_TARGET_COMMITISH=${{ steps.fireqos_latest_version.outputs.target_commitish }}
            CLASH_VERSION=${{ steps.version.outputs.result }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # first run does not export the cache

      # Do it all again with both archs. the amd64 will be a huge cache hit
      # this will update the manifest have both arches
      - name: Build and push multiarch Release Docker Image to DockerHub and Github docker registry
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/arm64,linux/arm/v7,linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/clash-tproxy:premium-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/clash-tproxy:premium-${{ steps.version.outputs.result }}
            ghcr.io/silencebay/clash-tproxy:premium-latest
            ghcr.io/silencebay/clash-tproxy:premium-${{ steps.version.outputs.result }}
          build-args: |
            FIREQOS_VERSION=${{ secrets.FIREQOS_VERSION }}
            FIREQOS_TARGET_COMMITISH=${{ steps.fireqos_latest_version.outputs.target_commitish }}
            CLASH_VERSION=${{ steps.version.outputs.result }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
